import tensorflow as tf
from tensorflow.python.ops import tensor_array_ops, control_flow_ops
from struct_formula import Formula, reward, robust
import numpy as np

class TARGET(object):
    def __init__(self,  batch_size, sequence_length, vocab):
        self.batch_size = batch_size
        self.sequence_length = sequence_length
        self.vocab = tf.constant(vocab)   #matrix


        tf.set_random_seed(233)


        # placeholder definition
        self.x = tf.compat.v1.placeholder(tf.int32, shape=[self.batch_size, self.sequence_length]) # sequence of tokens generated by generator batch address para
        with tf.device("/cpu:0"):
            self.processed_x = tf.transpose(tf.nn.embedding_lookup(self.vocab, self.x), perm=[0,1 , 2])  # seq_length x batch_size x emb_dim
        
        ta_emb_x = tensor_array_ops.TensorArray(
            dtype=tf.float32, size=self.sequence_length)
        ta_emb_x = ta_emb_x.unstack(self.processed_x)
        embed =[]
        for i in range(batch_size):
            xt_p= ta_emb_x.read(i)
            embed.append(xt_p)


        self.embeds = embed
        

def robust_loss(embeds,params):
    robustness =[]
    name = params[0]
    signal = params[1]
    time = params[2]
    label = params[3]
    formulas = Formula([],[],name,width= 2)     
     
    for sentence in embeds:
        tree= formulas.sentence2tree(sentence)    # decode to tree
        rewards = reward(tree, name,  signal,  time)
        re = [a*b for a,b in zip(rewards,label)]
        robustness.append(min(re))

    return np.max(robustness)

      

